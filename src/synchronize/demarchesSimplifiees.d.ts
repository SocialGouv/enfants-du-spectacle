export type Maybe<T> = T | null;
export type Exact<T extends Record<string, unknown>> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * Represents non-fractional signed whole numeric values. Since the value may
   * exceed the size of a 32-bit integer, it's encoded as a string.
   */
  BigInt: any;
  /** GeoJSON coordinates */
  Coordinates: any;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** A valid URL, transported as a string */
  URL: any;
}

export interface Address {
  __typename?: "Address";
  /** code INSEE de la commune */
  cityCode: Scalars["String"];
  /** nom de la commune */
  cityName: Scalars["String"];
  /** n° de département */
  departmentCode?: Maybe<Scalars["String"]>;
  /** nom de département */
  departmentName?: Maybe<Scalars["String"]>;
  /** coordonnées géographique */
  geometry?: Maybe<GeoJson>;
  /** libellé complet de l’adresse */
  label: Scalars["String"];
  /** code postal */
  postalCode: Scalars["String"];
  /** n° de region */
  regionCode?: Maybe<Scalars["String"]>;
  /** nom de région */
  regionName?: Maybe<Scalars["String"]>;
  /** numéro éventuel et nom de voie ou lieu dit */
  streetAddress?: Maybe<Scalars["String"]>;
  /** nom de voie ou lieu dit */
  streetName?: Maybe<Scalars["String"]>;
  /** numéro avec indice de répétition éventuel (bis, ter, A, B) */
  streetNumber?: Maybe<Scalars["String"]>;
  /** type de résultat trouvé */
  type: AddressType;
}

export type AddressChamp = Champ & {
  __typename?: "AddressChamp";
  address?: Maybe<Address>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export enum AddressType {
  /** numéro « à la plaque » */
  Housenumber = "housenumber",
  /** lieu-dit */
  Locality = "locality",
  /** numéro « à la commune » */
  Municipality = "municipality",
  /** position « à la voie », placé approximativement au centre de celle-ci */
  Street = "street",
}

export interface Association {
  __typename?: "Association";
  dateCreation?: Maybe<Scalars["ISO8601Date"]>;
  dateDeclaration?: Maybe<Scalars["ISO8601Date"]>;
  datePublication?: Maybe<Scalars["ISO8601Date"]>;
  objet?: Maybe<Scalars["String"]>;
  rna: Scalars["String"];
  titre: Scalars["String"];
}

export interface Avis {
  __typename?: "Avis";
  attachment?: Maybe<File>;
  claimant?: Maybe<Profile>;
  dateQuestion: Scalars["ISO8601DateTime"];
  dateReponse?: Maybe<Scalars["ISO8601DateTime"]>;
  expert?: Maybe<Profile>;
  id: Scalars["ID"];
  /** @deprecated Utilisez le champ claimant à la place. */
  instructeur: Profile;
  question: Scalars["String"];
  reponse?: Maybe<Scalars["String"]>;
}

export type CarteChamp = Champ & {
  __typename?: "CarteChamp";
  geoAreas: GeoArea[];
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export interface Champ {
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
}

export interface ChampDescriptor {
  __typename?: "ChampDescriptor";
  /** Description des champs d’un bloc répétable. */
  champDescriptors?: Maybe<ChampDescriptor[]>;
  /** Description du champ. */
  description?: Maybe<Scalars["String"]>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** List des options d’un champ avec selection. */
  options?: Maybe<Scalars["String"][]>;
  /** Est-ce que le champ est obligatoire ? */
  required: Scalars["Boolean"];
  /** Type de la valeur du champ. */
  type: TypeDeChamp;
}

export type CheckboxChamp = Champ & {
  __typename?: "CheckboxChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  value: Scalars["Boolean"];
};

export enum Civilite {
  /** Monsieur */
  M = "M",
  /** Madame */
  Mme = "Mme",
}

export type CiviliteChamp = Champ & {
  __typename?: "CiviliteChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  value?: Maybe<Civilite>;
};

/** Autogenerated input type of CreateDirectUpload */
export interface CreateDirectUploadInput {
  /** File size (bytes) */
  byteSize: Scalars["Int"];
  /** MD5 file checksum as base64 */
  checksum: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** File content type */
  contentType: Scalars["String"];
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Original file name */
  filename: Scalars["String"];
}

/** Autogenerated return type of CreateDirectUpload */
export interface CreateDirectUploadPayload {
  __typename?: "CreateDirectUploadPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  directUpload: DirectUpload;
}

export type DateChamp = Champ & {
  __typename?: "DateChamp";
  /** La valeur du champ formaté en ISO8601 (Date). */
  date?: Maybe<Scalars["ISO8601Date"]>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  /**
   * La valeur du champ formaté en ISO8601 (DateTime).
   * @deprecated Utilisez le champ 'date' ou le fragment 'DatetimeChamp' à la place.
   */
  value?: Maybe<Scalars["ISO8601DateTime"]>;
};

export type DatetimeChamp = Champ & {
  __typename?: "DatetimeChamp";
  /** La valeur du champ formaté en ISO8601 (DateTime). */
  datetime?: Maybe<Scalars["ISO8601DateTime"]>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export type DecimalNumberChamp = Champ & {
  __typename?: "DecimalNumberChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  value?: Maybe<Scalars["Float"]>;
};

/** Un dossier supprimé */
export interface DeletedDossier {
  __typename?: "DeletedDossier";
  /** Date de suppression. */
  dateSupression: Scalars["ISO8601DateTime"];
  id: Scalars["ID"];
  /** Le numéro du dossier qui a été supprimé. */
  number: Scalars["Int"];
  /** La raison de la suppression du dossier. */
  reason: Scalars["String"];
  /** L’état du dossier supprimé. */
  state: DossierState;
}

/** The connection type for DeletedDossier. */
export interface DeletedDossierConnection {
  __typename?: "DeletedDossierConnection";
  /** A list of edges. */
  edges?: Maybe<Maybe<DeletedDossierEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<DeletedDossier>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
}

/** An edge in a connection. */
export interface DeletedDossierEdge {
  __typename?: "DeletedDossierEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<DeletedDossier>;
}

export interface Demandeur {
  id: Scalars["ID"];
}

/** Une démarche */
export interface Demarche {
  __typename?: "Demarche";
  annotationDescriptors: ChampDescriptor[];
  champDescriptors: ChampDescriptor[];
  /** Date de la création. */
  dateCreation: Scalars["ISO8601DateTime"];
  /** Date de la dépublication. */
  dateDepublication?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Date de la dernière modification. */
  dateDerniereModification: Scalars["ISO8601DateTime"];
  /** Date de la fermeture. */
  dateFermeture?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Date de la publication. */
  datePublication?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Pour une démarche déclarative, état cible des dossiers à valider automatiquement */
  declarative?: Maybe<DossierDeclarativeState>;
  /** Liste de tous les dossiers supprimés d’une démarche. */
  deletedDossiers: DeletedDossierConnection;
  /** Description de la démarche. */
  description: Scalars["String"];
  /** Liste de tous les dossiers d’une démarche. */
  dossiers: DossierConnection;
  draftRevision: Revision;
  groupeInstructeurs: GroupeInstructeur[];
  id: Scalars["ID"];
  /** Numero de la démarche. */
  number: Scalars["Int"];
  publishedRevision?: Maybe<Revision>;
  revisions: Revision[];
  service: Service;
  /** État de la démarche. */
  state: DemarcheState;
  /** Titre de la démarche. */
  title: Scalars["String"];
}

/** Une démarche */
export interface DemarcheDeletedDossiersArgs {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  deletedSince?: Maybe<Scalars["ISO8601DateTime"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
  order?: Maybe<Order>;
}

/** Une démarche */
export interface DemarcheDossiersArgs {
  after?: Maybe<Scalars["String"]>;
  archived?: Maybe<Scalars["Boolean"]>;
  before?: Maybe<Scalars["String"]>;
  createdSince?: Maybe<Scalars["ISO8601DateTime"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
  maxRevision?: Maybe<Scalars["ID"]>;
  minRevision?: Maybe<Scalars["ID"]>;
  order?: Maybe<Order>;
  revision?: Maybe<Scalars["ID"]>;
  state?: Maybe<DossierState>;
  updatedSince?: Maybe<Scalars["ISO8601DateTime"]>;
}

/**
 * Une démarche (métadonnées)
 * Ceci est une version abrégée du type `Demarche`, qui n’expose que les métadonnées.
 * Cela évite l’accès récursif aux dossiers.
 */
export interface DemarcheDescriptor {
  __typename?: "DemarcheDescriptor";
  /** Date de la création. */
  dateCreation: Scalars["ISO8601DateTime"];
  /** Date de la dépublication. */
  dateDepublication?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Date de la dernière modification. */
  dateDerniereModification: Scalars["ISO8601DateTime"];
  /** Date de la fermeture. */
  dateFermeture?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Date de la publication. */
  datePublication?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Pour une démarche déclarative, état cible des dossiers à valider automatiquement */
  declarative?: Maybe<DossierDeclarativeState>;
  /** Description de la démarche. */
  description: Scalars["String"];
  id: Scalars["ID"];
  /** Numero de la démarche. */
  number: Scalars["Int"];
  /** État de la démarche. */
  state: DemarcheState;
  /** Titre de la démarche. */
  title: Scalars["String"];
}

export enum DemarcheState {
  /** Brouillon */
  Brouillon = "brouillon",
  /** Close */
  Close = "close",
  /** Depubliee */
  Depubliee = "depubliee",
  /** Publiée */
  Publiee = "publiee",
}

/** Represents direct upload credentials */
export interface DirectUpload {
  __typename?: "DirectUpload";
  /** Created blob record ID */
  blobId: Scalars["ID"];
  /** HTTP request headers (JSON-encoded) */
  headers: Scalars["String"];
  /** Created blob record signed ID */
  signedBlobId: Scalars["ID"];
  /** Upload URL */
  url: Scalars["String"];
}

/** Un dossier */
export interface Dossier {
  __typename?: "Dossier";
  annotations: Champ[];
  archived: Scalars["Boolean"];
  /** L’URL de l’attestation au format PDF. */
  attestation?: Maybe<File>;
  avis: Avis[];
  champs: Champ[];
  /** Date de la dernière modification. */
  dateDerniereModification: Scalars["ISO8601DateTime"];
  /** Date de dépôt. */
  datePassageEnConstruction: Scalars["ISO8601DateTime"];
  /** Date de passage en instruction. */
  datePassageEnInstruction?: Maybe<Scalars["ISO8601DateTime"]>;
  /** Date de traitement. */
  dateTraitement?: Maybe<Scalars["ISO8601DateTime"]>;
  demandeur: Demandeur;
  demarche: DemarcheDescriptor;
  /** L’URL du GeoJSON contenant les données cartographiques du dossier. */
  geojson?: Maybe<File>;
  groupeInstructeur: GroupeInstructeur;
  id: Scalars["ID"];
  instructeurs: Profile[];
  messages: Message[];
  motivation?: Maybe<Scalars["String"]>;
  motivationAttachment?: Maybe<File>;
  /** Le numero du dossier. */
  number: Scalars["Int"];
  /** L’URL du dossier au format PDF. */
  pdf?: Maybe<File>;
  revision: Revision;
  /** L’état du dossier. */
  state: DossierState;
  usager: Profile;
}

/** Un dossier */
export interface DossierAnnotationsArgs {
  id?: Maybe<Scalars["ID"]>;
}

/** Un dossier */
export interface DossierAvisArgs {
  id?: Maybe<Scalars["ID"]>;
}

/** Un dossier */
export interface DossierChampsArgs {
  id?: Maybe<Scalars["ID"]>;
}

/** Un dossier */
export interface DossierMessagesArgs {
  id?: Maybe<Scalars["ID"]>;
}

/** Autogenerated input type of DossierAccepter */
export interface DossierAccepterInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Désactiver l’envoi de l’email de notification après l’opération */
  disableNotification?: Maybe<Scalars["Boolean"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui prend la décision sur le dossier. */
  instructeurId: Scalars["ID"];
  justificatif?: Maybe<Scalars["ID"]>;
  motivation?: Maybe<Scalars["String"]>;
}

/** Autogenerated return type of DossierAccepter */
export interface DossierAccepterPayload {
  __typename?: "DossierAccepterPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierArchiver */
export interface DossierArchiverInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui prend la décision sur le dossier. */
  instructeurId: Scalars["ID"];
}

/** Autogenerated return type of DossierArchiver */
export interface DossierArchiverPayload {
  __typename?: "DossierArchiverPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierChangerGroupeInstructeur */
export interface DossierChangerGroupeInstructeurInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Group instructeur a affecter */
  groupeInstructeurId: Scalars["ID"];
}

/** Autogenerated return type of DossierChangerGroupeInstructeur */
export interface DossierChangerGroupeInstructeurPayload {
  __typename?: "DossierChangerGroupeInstructeurPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierClasserSansSuite */
export interface DossierClasserSansSuiteInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Désactiver l’envoi de l’email de notification après l’opération */
  disableNotification?: Maybe<Scalars["Boolean"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui prend la décision sur le dossier. */
  instructeurId: Scalars["ID"];
  justificatif?: Maybe<Scalars["ID"]>;
  motivation: Scalars["String"];
}

/** Autogenerated return type of DossierClasserSansSuite */
export interface DossierClasserSansSuitePayload {
  __typename?: "DossierClasserSansSuitePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

/** The connection type for Dossier. */
export interface DossierConnection {
  __typename?: "DossierConnection";
  /** A list of edges. */
  edges?: Maybe<Maybe<DossierEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<Dossier>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
}

export enum DossierDeclarativeState {
  /** Accepté */
  Accepte = "accepte",
  /** En instruction */
  EnInstruction = "en_instruction",
}

/** An edge in a connection. */
export interface DossierEdge {
  __typename?: "DossierEdge";
  /** A cursor for use in pagination. */
  cursor: Scalars["String"];
  /** The item at the end of the edge. */
  node?: Maybe<Dossier>;
}

/** Autogenerated input type of DossierEnvoyerMessage */
export interface DossierEnvoyerMessageInput {
  attachment?: Maybe<Scalars["ID"]>;
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossierId: Scalars["ID"];
  instructeurId: Scalars["ID"];
}

/** Autogenerated return type of DossierEnvoyerMessage */
export interface DossierEnvoyerMessagePayload {
  __typename?: "DossierEnvoyerMessagePayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
  message?: Maybe<Message>;
}

export type DossierLinkChamp = Champ & {
  __typename?: "DossierLinkChamp";
  dossier?: Maybe<Dossier>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

/** Autogenerated input type of DossierModifierAnnotationCheckbox */
export interface DossierModifierAnnotationCheckboxInput {
  /** Annotation ID */
  annotationId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui demande la modification. */
  instructeurId: Scalars["ID"];
  value: Scalars["Boolean"];
}

/** Autogenerated return type of DossierModifierAnnotationCheckbox */
export interface DossierModifierAnnotationCheckboxPayload {
  __typename?: "DossierModifierAnnotationCheckboxPayload";
  annotation?: Maybe<Champ>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierModifierAnnotationDate */
export interface DossierModifierAnnotationDateInput {
  /** Annotation ID */
  annotationId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui demande la modification. */
  instructeurId: Scalars["ID"];
  value: Scalars["ISO8601Date"];
}

/** Autogenerated return type of DossierModifierAnnotationDate */
export interface DossierModifierAnnotationDatePayload {
  __typename?: "DossierModifierAnnotationDatePayload";
  annotation?: Maybe<Champ>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierModifierAnnotationDatetime */
export interface DossierModifierAnnotationDatetimeInput {
  /** Annotation ID */
  annotationId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui demande la modification. */
  instructeurId: Scalars["ID"];
  value: Scalars["ISO8601DateTime"];
}

/** Autogenerated return type of DossierModifierAnnotationDatetime */
export interface DossierModifierAnnotationDatetimePayload {
  __typename?: "DossierModifierAnnotationDatetimePayload";
  annotation?: Maybe<Champ>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierModifierAnnotationIntegerNumber */
export interface DossierModifierAnnotationIntegerNumberInput {
  /** Annotation ID */
  annotationId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui demande la modification. */
  instructeurId: Scalars["ID"];
  value: Scalars["Int"];
}

/** Autogenerated return type of DossierModifierAnnotationIntegerNumber */
export interface DossierModifierAnnotationIntegerNumberPayload {
  __typename?: "DossierModifierAnnotationIntegerNumberPayload";
  annotation?: Maybe<Champ>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierModifierAnnotationText */
export interface DossierModifierAnnotationTextInput {
  /** Annotation ID */
  annotationId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui demande la modification. */
  instructeurId: Scalars["ID"];
  value: Scalars["String"];
}

/** Autogenerated return type of DossierModifierAnnotationText */
export interface DossierModifierAnnotationTextPayload {
  __typename?: "DossierModifierAnnotationTextPayload";
  annotation?: Maybe<Champ>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierPasserEnInstruction */
export interface DossierPasserEnInstructionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Désactiver l’envoi de l’email de notification après l’opération */
  disableNotification?: Maybe<Scalars["Boolean"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui prend la décision sur le dossier. */
  instructeurId: Scalars["ID"];
}

/** Autogenerated return type of DossierPasserEnInstruction */
export interface DossierPasserEnInstructionPayload {
  __typename?: "DossierPasserEnInstructionPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

/** Autogenerated input type of DossierRefuser */
export interface DossierRefuserInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  /** Désactiver l’envoi de l’email de notification après l’opération */
  disableNotification?: Maybe<Scalars["Boolean"]>;
  /** Dossier ID */
  dossierId: Scalars["ID"];
  /** Instructeur qui prend la décision sur le dossier. */
  instructeurId: Scalars["ID"];
  justificatif?: Maybe<Scalars["ID"]>;
  motivation: Scalars["String"];
}

/** Autogenerated return type of DossierRefuser */
export interface DossierRefuserPayload {
  __typename?: "DossierRefuserPayload";
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]>;
  dossier?: Maybe<Dossier>;
  errors?: Maybe<ValidationError[]>;
}

export enum DossierState {
  /** Accepté */
  Accepte = "accepte",
  /** En construction */
  EnConstruction = "en_construction",
  /** En instruction */
  EnInstruction = "en_instruction",
  /** Refusé */
  Refuse = "refuse",
  /** Classé sans suite */
  SansSuite = "sans_suite",
}

export interface Effectif {
  __typename?: "Effectif";
  nb: Scalars["Float"];
  periode: Scalars["String"];
}

export interface Entreprise {
  __typename?: "Entreprise";
  attestationFiscaleAttachment?: Maybe<File>;
  attestationSocialeAttachment?: Maybe<File>;
  /** capital social de l’entreprise. -1 si inconnu. */
  capitalSocial?: Maybe<Scalars["BigInt"]>;
  codeEffectifEntreprise?: Maybe<Scalars["String"]>;
  dateCreation: Scalars["ISO8601Date"];
  /** effectif moyen d’une année */
  effectifAnnuel?: Maybe<Effectif>;
  /** effectif pour un mois donné */
  effectifMensuel?: Maybe<Effectif>;
  formeJuridique?: Maybe<Scalars["String"]>;
  formeJuridiqueCode?: Maybe<Scalars["String"]>;
  inlineAdresse: Scalars["String"];
  nom?: Maybe<Scalars["String"]>;
  nomCommercial: Scalars["String"];
  numeroTvaIntracommunautaire?: Maybe<Scalars["String"]>;
  prenom?: Maybe<Scalars["String"]>;
  raisonSociale: Scalars["String"];
  siren: Scalars["String"];
  siretSiegeSocial: Scalars["String"];
}

export interface File {
  __typename?: "File";
  /** @deprecated Utilisez le champ `byteSizeBigInt` à la place. */
  byteSize: Scalars["Int"];
  byteSizeBigInt: Scalars["BigInt"];
  checksum: Scalars["String"];
  contentType: Scalars["String"];
  filename: Scalars["String"];
  url: Scalars["URL"];
}

export interface GeoArea {
  description?: Maybe<Scalars["String"]>;
  geometry: GeoJson;
  id: Scalars["ID"];
  source: GeoAreaSource;
}

export enum GeoAreaSource {
  /** Parcelle cadastrale */
  Cadastre = "cadastre",
  /** Sélection utilisateur */
  SelectionUtilisateur = "selection_utilisateur",
}

export interface GeoJson {
  __typename?: "GeoJSON";
  coordinates: Scalars["Coordinates"];
  type: Scalars["String"];
}

/** Un groupe instructeur */
export interface GroupeInstructeur {
  __typename?: "GroupeInstructeur";
  id: Scalars["ID"];
  instructeurs: Profile[];
  label: Scalars["String"];
  /** Le numero du groupe instructeur. */
  number: Scalars["Int"];
}

/** Un groupe instructeur avec ces dossiers */
export interface GroupeInstructeurWithDossiers {
  __typename?: "GroupeInstructeurWithDossiers";
  /** Liste de tous les dossiers d’une démarche. */
  dossiers: DossierConnection;
  id: Scalars["ID"];
  instructeurs: Profile[];
  label: Scalars["String"];
  /** Le numero du groupe instructeur. */
  number: Scalars["Int"];
}

/** Un groupe instructeur avec ces dossiers */
export interface GroupeInstructeurWithDossiersDossiersArgs {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  createdSince?: Maybe<Scalars["ISO8601DateTime"]>;
  first?: Maybe<Scalars["Int"]>;
  last?: Maybe<Scalars["Int"]>;
  order?: Maybe<Order>;
  state?: Maybe<DossierState>;
  updatedSince?: Maybe<Scalars["ISO8601DateTime"]>;
}

export type IntegerNumberChamp = Champ & {
  __typename?: "IntegerNumberChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  value?: Maybe<Scalars["BigInt"]>;
};

export type LinkedDropDownListChamp = Champ & {
  __typename?: "LinkedDropDownListChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  primaryValue?: Maybe<Scalars["String"]>;
  secondaryValue?: Maybe<Scalars["String"]>;
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export interface Message {
  __typename?: "Message";
  attachment?: Maybe<File>;
  body: Scalars["String"];
  createdAt: Scalars["ISO8601DateTime"];
  email: Scalars["String"];
  id: Scalars["ID"];
}

export type MultipleDropDownListChamp = Champ & {
  __typename?: "MultipleDropDownListChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  values: Scalars["String"][];
};

export interface Mutation {
  __typename?: "Mutation";
  /** File information required to prepare a direct upload */
  createDirectUpload?: Maybe<CreateDirectUploadPayload>;
  /** Accepter le dossier. */
  dossierAccepter?: Maybe<DossierAccepterPayload>;
  /** Archiver le dossier. */
  dossierArchiver?: Maybe<DossierArchiverPayload>;
  /** Changer le grope instructeur du dossier. */
  dossierChangerGroupeInstructeur?: Maybe<DossierChangerGroupeInstructeurPayload>;
  /** Classer le dossier sans suite. */
  dossierClasserSansSuite?: Maybe<DossierClasserSansSuitePayload>;
  /** Envoyer un message à l'usager du dossier. */
  dossierEnvoyerMessage?: Maybe<DossierEnvoyerMessagePayload>;
  /** Modifier l’annotation au format oui/non. */
  dossierModifierAnnotationCheckbox?: Maybe<DossierModifierAnnotationCheckboxPayload>;
  /** Modifier l’annotation au format date. */
  dossierModifierAnnotationDate?: Maybe<DossierModifierAnnotationDatePayload>;
  /** Modifier l’annotation au format date et heure. */
  dossierModifierAnnotationDatetime?: Maybe<DossierModifierAnnotationDatetimePayload>;
  /** Modifier l’annotation au format nombre entier. */
  dossierModifierAnnotationIntegerNumber?: Maybe<DossierModifierAnnotationIntegerNumberPayload>;
  /** Modifier l’annotation au format text. */
  dossierModifierAnnotationText?: Maybe<DossierModifierAnnotationTextPayload>;
  /** Passer le dossier en instruction. */
  dossierPasserEnInstruction?: Maybe<DossierPasserEnInstructionPayload>;
  /** Refuser le dossier. */
  dossierRefuser?: Maybe<DossierRefuserPayload>;
}

export interface MutationCreateDirectUploadArgs {
  input: CreateDirectUploadInput;
}

export interface MutationDossierAccepterArgs {
  input: DossierAccepterInput;
}

export interface MutationDossierArchiverArgs {
  input: DossierArchiverInput;
}

export interface MutationDossierChangerGroupeInstructeurArgs {
  input: DossierChangerGroupeInstructeurInput;
}

export interface MutationDossierClasserSansSuiteArgs {
  input: DossierClasserSansSuiteInput;
}

export interface MutationDossierEnvoyerMessageArgs {
  input: DossierEnvoyerMessageInput;
}

export interface MutationDossierModifierAnnotationCheckboxArgs {
  input: DossierModifierAnnotationCheckboxInput;
}

export interface MutationDossierModifierAnnotationDateArgs {
  input: DossierModifierAnnotationDateInput;
}

export interface MutationDossierModifierAnnotationDatetimeArgs {
  input: DossierModifierAnnotationDatetimeInput;
}

export interface MutationDossierModifierAnnotationIntegerNumberArgs {
  input: DossierModifierAnnotationIntegerNumberInput;
}

export interface MutationDossierModifierAnnotationTextArgs {
  input: DossierModifierAnnotationTextInput;
}

export interface MutationDossierPasserEnInstructionArgs {
  input: DossierPasserEnInstructionInput;
}

export interface MutationDossierRefuserArgs {
  input: DossierRefuserInput;
}

export enum Order {
  /** L’ordre ascendant. */
  Asc = "ASC",
  /** L’ordre descendant. */
  Desc = "DESC",
}

/** Information about pagination in a connection. */
export interface PageInfo {
  __typename?: "PageInfo";
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars["String"]>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars["Boolean"];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars["Boolean"];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars["String"]>;
}

export type ParcelleCadastrale = GeoArea & {
  __typename?: "ParcelleCadastrale";
  /** @deprecated Utilisez le champ `prefixe` à la place. */
  codeArr: Scalars["String"];
  /** @deprecated Utilisez le champ `commune` à la place. */
  codeCom: Scalars["String"];
  /** @deprecated Utilisez le champ `commune` à la place. */
  codeDep: Scalars["String"];
  commune: Scalars["String"];
  description?: Maybe<Scalars["String"]>;
  /** @deprecated L’information n’est plus disponible. */
  feuille: Scalars["Int"];
  geometry: GeoJson;
  id: Scalars["ID"];
  /** @deprecated Utilisez le champ `commune` à la place. */
  nomCom: Scalars["String"];
  numero: Scalars["String"];
  prefixe: Scalars["String"];
  section: Scalars["String"];
  source: GeoAreaSource;
  surface: Scalars["String"];
  /** @deprecated L’information n’est plus disponible. */
  surfaceIntersection: Scalars["Float"];
  /** @deprecated Utilisez le champ `surface` à la place. */
  surfaceParcelle: Scalars["Float"];
};

export type PersonneMorale = Demandeur & {
  __typename?: "PersonneMorale";
  address: Address;
  /** @deprecated Utilisez le champ `address.label` à la place. */
  adresse: Scalars["String"];
  association?: Maybe<Association>;
  /** @deprecated Utilisez le champ `address.city_code` à la place. */
  codeInseeLocalite: Scalars["String"];
  /** @deprecated Utilisez le champ `address.postal_code` à la place. */
  codePostal: Scalars["String"];
  /** @deprecated Utilisez le champ `address` à la place. */
  complementAdresse?: Maybe<Scalars["String"]>;
  entreprise?: Maybe<Entreprise>;
  id: Scalars["ID"];
  libelleNaf: Scalars["String"];
  /** @deprecated Utilisez le champ `address.city_name` à la place. */
  localite: Scalars["String"];
  naf: Scalars["String"];
  /** @deprecated Utilisez le champ `address.street_name` à la place. */
  nomVoie?: Maybe<Scalars["String"]>;
  /** @deprecated Utilisez le champ `address.street_number` à la place. */
  numeroVoie?: Maybe<Scalars["String"]>;
  siegeSocial: Scalars["Boolean"];
  siret: Scalars["String"];
  /** @deprecated Utilisez le champ `address.street_address` à la place. */
  typeVoie?: Maybe<Scalars["String"]>;
};

export type PersonnePhysique = Demandeur & {
  __typename?: "PersonnePhysique";
  civilite?: Maybe<Civilite>;
  dateDeNaissance?: Maybe<Scalars["ISO8601Date"]>;
  id: Scalars["ID"];
  nom: Scalars["String"];
  prenom: Scalars["String"];
};

export type PieceJustificativeChamp = Champ & {
  __typename?: "PieceJustificativeChamp";
  file?: Maybe<File>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export interface Profile {
  __typename?: "Profile";
  email: Scalars["String"];
  id: Scalars["ID"];
}

export interface Query {
  __typename?: "Query";
  /** Informations concernant une démarche. */
  demarche: Demarche;
  /** Informations sur un dossier d’une démarche. */
  dossier: Dossier;
  /** Informations sur un groupe instructeur. */
  groupeInstructeur: GroupeInstructeurWithDossiers;
}

export interface QueryDemarcheArgs {
  number: Scalars["Int"];
}

export interface QueryDossierArgs {
  number: Scalars["Int"];
}

export interface QueryGroupeInstructeurArgs {
  number: Scalars["Int"];
}

export type RepetitionChamp = Champ & {
  __typename?: "RepetitionChamp";
  champs: Champ[];
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export interface Revision {
  __typename?: "Revision";
  annotationDescriptors: ChampDescriptor[];
  champDescriptors: ChampDescriptor[];
  /** Date de la création. */
  dateCreation: Scalars["ISO8601DateTime"];
  /** Date de la publication. */
  datePublication?: Maybe<Scalars["ISO8601DateTime"]>;
  id: Scalars["ID"];
}

export type SelectionUtilisateur = GeoArea & {
  __typename?: "SelectionUtilisateur";
  description?: Maybe<Scalars["String"]>;
  geometry: GeoJson;
  id: Scalars["ID"];
  source: GeoAreaSource;
};

export interface Service {
  __typename?: "Service";
  id: Scalars["ID"];
  nom: Scalars["String"];
  organisme: Scalars["String"];
  typeOrganisme: TypeOrganisme;
}

export type SiretChamp = Champ & {
  __typename?: "SiretChamp";
  etablissement?: Maybe<PersonneMorale>;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export type TextChamp = Champ & {
  __typename?: "TextChamp";
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
  value?: Maybe<Scalars["String"]>;
};

export type TitreIdentiteChamp = Champ & {
  __typename?: "TitreIdentiteChamp";
  grantType: TitreIdentiteGrantType;
  id: Scalars["ID"];
  /** Libellé du champ. */
  label: Scalars["String"];
  /** La valeur du champ sous forme texte. */
  stringValue?: Maybe<Scalars["String"]>;
};

export enum TitreIdentiteGrantType {
  /** Françe Connect */
  FranceConnect = "france_connect",
  /** Pièce justificative */
  PieceJustificative = "piece_justificative",
}

export enum TypeDeChamp {
  /** Adresse */
  Address = "address",
  /** Annuaire de l’éducation */
  AnnuaireEducation = "annuaire_education",
  /** Carte */
  Carte = "carte",
  /** Case à cocher */
  Checkbox = "checkbox",
  /** Civilité */
  Civilite = "civilite",
  /** Données de la Caisse nationale des allocations familiales */
  Cnaf = "cnaf",
  /** Communes */
  Communes = "communes",
  /** Date */
  Date = "date",
  /** Date et Heure */
  Datetime = "datetime",
  /** Nombre décimal */
  DecimalNumber = "decimal_number",
  /** Départements */
  Departements = "departements",
  /** Lien vers un autre dossier */
  DossierLink = "dossier_link",
  /** Choix parmi une liste */
  DropDownList = "drop_down_list",
  /** Email */
  Email = "email",
  /** Engagement */
  Engagement = "engagement",
  /** Explication */
  Explication = "explication",
  /** Titre de section */
  HeaderSection = "header_section",
  /** Iban */
  Iban = "iban",
  /** Nombre entier */
  IntegerNumber = "integer_number",
  /** Deux menus déroulants liés */
  LinkedDropDownList = "linked_drop_down_list",
  /** Choix multiples */
  MultipleDropDownList = "multiple_drop_down_list",
  /** Nombre */
  Number = "number",
  /** Pays */
  Pays = "pays",
  /** Téléphone */
  Phone = "phone",
  /** Pièce justificative */
  PieceJustificative = "piece_justificative",
  /** Régions */
  Regions = "regions",
  /** Bloc répétable */
  Repetition = "repetition",
  /** SIRET */
  Siret = "siret",
  /** Texte */
  Text = "text",
  /** Zone de texte */
  Textarea = "textarea",
  /** Titre identité */
  TitreIdentite = "titre_identite",
  /** Oui/Non */
  YesNo = "yes_no",
}

export enum TypeOrganisme {
  /** Administration centrale */
  AdministrationCentrale = "administration_centrale",
  /** Association */
  Association = "association",
  /** Autre */
  Autre = "autre",
  /** Collectivité territoriale */
  CollectiviteTerritoriale = "collectivite_territoriale",
  /** Établissement d’enseignement */
  EtablissementEnseignement = "etablissement_enseignement",
  /** Opérateur d’État */
  OperateurDEtat = "operateur_d_etat",
  /** Service déconcentré de l’État */
  ServiceDeconcentreDeLEtat = "service_deconcentre_de_l_etat",
}

/** Éreur de validation */
export interface ValidationError {
  __typename?: "ValidationError";
  /** A description of the error */
  message: Scalars["String"];
}
