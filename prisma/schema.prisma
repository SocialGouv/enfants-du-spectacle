generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commission {
  id              Int      @id @default(autoincrement())
  departement     String
  date            DateTime
  dateLimiteDepot DateTime
  projets         Projet[]
}

model SocieteProduction {
  id          Int         @id @default(autoincrement())
  nom         String
  siret       String?
  departement String
  demandeurs  Demandeur[]
  projets     Projet[]
}

model Demandeur {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  nom                 String
  prenom              String
  societeProduction   SocieteProduction @relation(fields: [societeProductionId], references: [id])
  societeProductionId Int
  dossiersDS          DossierDS[]
}

model DossierDS {
  numero      Int       @id
  demandeur   Demandeur @relation(fields: [demandeurId], references: [id])
  demandeurId Int
  projets     Projet[]
}

enum StatutProjet {
  CONSTRUCTION
  INSTRUCTION
  PRET
  AVIS_AJOURNE
  AVIS_FAVORABLE
  AVIS_FAVORABLE_SOUS_RESERVE
  AVIS_DEFAVORABLE
  ACCEPTE
  REFUSE
}

model Projet {
  id                  Int               @id @default(autoincrement())
  nom                 String
  statut              StatutProjet      @default(CONSTRUCTION)
  commissionId        Int
  commission          Commission        @relation(fields: [commissionId], references: [id])
  societeProductionId Int
  societeProduction   SocieteProduction @relation(fields: [societeProductionId], references: [id])
  dossierDSNumero     Int
  dossierDS           DossierDS         @relation(fields: [dossierDSNumero], references: [numero])
  enfants             Enfant[]
  agentId             Int?
  agent               Agent?            @relation(fields: [agentId], references: [id])
}

model Enfant {
  id       Int    @id @default(autoincrement())
  role     String
  prenom   String
  nom      String
  projetId Int
  projet   Projet @relation(fields: [projetId], references: [id])
}

model Agent {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  nom     String
  prenom  String
  projets Projet[]
}

// for next-auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
