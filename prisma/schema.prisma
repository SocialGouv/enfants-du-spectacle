generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commission {
  id              Int        @id @default(autoincrement())
  departement     String
  date            DateTime
  dateLimiteDepot DateTime
  lastSent        DateTime?
  archived        Boolean?
  dossiers        Dossier[]
  SendList        SendList[]
}

model SocieteProduction {
  id                        Int         @id @default(autoincrement())
  nom                       String?
  siret                     String?
  departement               String?
  siren                     String?
  adresse                   String?
  adresseCodeCommune        String?
  adresseCodePostal         String?
  formeJuridique            String?
  naf                       String?
  raisonSociale             String?
  conventionCollectiveCode  String?
  otherConventionCollective String?
  demandeurs                Demandeur[]
  dossiers                  Dossier[]
}

model Demandeur {
  id                        Int                @id @default(autoincrement())
  email                     String?
  nom                       String?
  prenom                    String?
  phone                     String?
  societeProductionId       Int?
  fonction                  String?
  conventionCollectiveCode  String?
  otherConventionCollective String?
  societeProduction         SocieteProduction? @relation(fields: [societeProductionId], references: [id])
  dossiers                  Dossier[]
}

model PieceDossier {
  id         Int                 @id @default(autoincrement())
  dossierId  Int
  type       JustificatifDossier
  link       String?
  externalId String?
  statut     STATUT_PIECE?
  nom        String?
  dossier    Dossier             @relation(fields: [dossierId], references: [id], onDelete: Cascade)

  @@index([dossierId])
}

model Dossier {
  id                        Int                   @id @default(autoincrement())
  nom                       String?
  statut                    StatutDossier         @default(BROUILLON)
  categorie                 CategorieDossier?
  commissionId              Int?
  societeProductionId       Int?
  demandeurId               Int?
  justificatifs             JustificatifDossier[]
  dateDebut                 DateTime?
  dateFin                   DateTime?
  presentation              String?
  scenesSensibles           String[]
  externalId                String?               @unique
  numeroDS                  Int?                  @default(0)
  conventionCollectiveCode  String?
  dateDerniereModification  DateTime?
  number                    Int?
  cdc                       Int?
  dateDepot                 DateTime?
  statusNotification        StatusNotif?
  source                    Source?
  medecinId                 Int?
  otherConventionCollective String?
  creatorId                 Int?
  commissionString          String?
  commissionDate            DateTime?
  collaboratorIds           Int[]
  dateCreation              DateTime?
  scenario                  String?
  securite                  String?
  complementaire            String?
  instructeurId             Int?
  commentaires              Commentaire[]
  comments                  Comments[]
  commission                Commission?           @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  creator                   User?                 @relation("creator", fields: [creatorId], references: [id])
  demandeur                 Demandeur?            @relation(fields: [demandeurId], references: [id])
  instructeur               User?                 @relation("instructeur", fields: [instructeurId], references: [id])
  medecin                   User?                 @relation("medecin", fields: [medecinId], references: [id])
  societeProduction         SocieteProduction?    @relation(fields: [societeProductionId], references: [id])
  enfants                   Enfant[]
  piecesDossier             PieceDossier[]

  @@index([commissionId])
  @@index([societeProductionId]) 
  @@index([demandeurId])
  @@index([creatorId])
  @@index([instructeurId])
  @@index([medecinId])
}

model Commentaire {
  id        Int      @id @default(autoincrement())
  text      String
  date      DateTime
  userId    Int
  dossierId Int
  seen      Boolean?
  dossier   Dossier  @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Comments {
  id             Int           @id @default(autoincrement())
  text           String
  source         Sourcecomment
  dossierId      Int
  enfantId       Int?
  commentsId     Int?
  userId         Int?
  externalUserId Int?
  sender         String?
  seen           Boolean?
  date           DateTime?
  parentComment  Comments?     @relation("ParentComments", fields: [commentsId], references: [id])
  Comments       Comments[]    @relation("ParentComments")
  dossier        Dossier       @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  enfant         Enfant?       @relation(fields: [enfantId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])

  @@index([dossierId])
  @@index([userId])
  @@index([enfantId])
}

model PieceDossierEnfant {
  id         Int                @id @default(autoincrement())
  enfantId   Int
  type       JustificatifEnfant
  link       String?
  dossierId  Int?
  externalId String?
  statut     STATUT_PIECE?
  nom        String?
  enfant     Enfant             @relation(fields: [enfantId], references: [id], onDelete: Cascade)

  @@index([dossierId])
  @@index([enfantId])
}

model Remuneration {
  id                Int           @id @default(autoincrement())
  typeRemuneration  String?
  natureCachet      NatureCachet?
  autreNatureCachet String?
  montant           Float?
  nombre            Int?          @default(0)
  nombreLignes      Int?          @default(0)
  totalDadr         Float?
  comment           String?
  enfantId          Int?
  Enfant            Enfant?       @relation(fields: [enfantId], references: [id])
}

model Enfant {
  id                          Int                      @id @default(autoincrement())
  prenom                      String?
  nom                         String?
  dateNaissance               DateTime?
  typeEmploi                  TypeEmploi?
  nomPersonnage               String?
  periodeTravail              String?
  nombreJours                 Int?
  contexteTravail             String?
  montantCachet               Float?
  nombreCachets               Int?                     @default(0)
  remunerationsAdditionnelles String?
  remunerationTotale          Float?
  justificatifs               JustificatifEnfant[]
  dossierId                   Int
  nombreLignes                Int?                     @default(0)
  cdc                         Int?
  adresseEnfant               String?
  adresseRepresentant1        String?
  adresseRepresentant2        String?
  nomRepresentant1            String?
  nomRepresentant2            String?
  prenomRepresentant1         String?
  prenomRepresentant2         String?
  externalId                  String?                  @unique
  typeConsultation            TypeConsultation?
  mailRepresentant1           String?
  mailRepresentant2           String?
  telRepresentant1            String?
  telRepresentant2            String?
  typeConsultationMedecin     TypeConsultationMedecin?
  dateConsultation            DateTime?
  checkTravailNuit            Boolean?
  textTravailNuit             String?
  dateDerniereModification    DateTime?
  livret                      String?
  autorisation                String?
  situation                   String?
  contrat                     String?
  certificat                  String?
  avis                        String?
  populatedByUserId           Int?
  comments                    Comments[]
  dossier                     Dossier                  @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  populatedBy                 User?                    @relation("populatedBy", fields: [populatedByUserId], references: [id])
  piecesDossier               PieceDossierEnfant[]
  remuneration                Remuneration[]

  @@index([dossierId])
  @@index([populatedByUserId])
}

model ContenuPdf {
  id                    String     @id @default(cuid())
  departement           String
  section               SectionPdf
  titre                 String
  contenu               String
  dateCreation          DateTime   @default(now())
  dateModification      DateTime   @updatedAt
  utilisateurModifierId Int?
  utilisateurModifier   User?      @relation(fields: [utilisateurModifierId], references: [id])

  @@unique([departement, section])
}

model SendList {
  id           Int        @id @default(autoincrement())
  send         Boolean
  lastSent     DateTime?
  commissionId Int
  userId       Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String?
  nom                   String?
  prenom                String?
  email                 String?       @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role?
  departement           String?
  departements          String[]
  telephone             String?
  fonction              String?
  createdAt             DateTime?     @default(now()) @map("created_at")
  updatedAt             DateTime?     @updatedAt @map("updated_at")
  accounts              Account[]
  commentaires          Commentaire[]
  comments              Comments[]
  contenusPdf           ContenuPdf[]
  dossiersCreated       Dossier[]     @relation("creator")
  dossiersAsInstructeur Dossier[]     @relation("instructeur")
  dossiersMedecin       Dossier[]     @relation("medecin")
  enfantsPopulated      Enfant[]      @relation("populatedBy")
  SendList              SendList[]
  sessions              Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         Int      @id @default(autoincrement())

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  providerAccountId  String  @map("provider_account_id")
  userId             Int     @map("user_id")
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum StatutDossier {
  CONSTRUCTION
  INSTRUCTION
  PRET
  AVIS_AJOURNE
  AVIS_FAVORABLE
  AVIS_FAVORABLE_SOUS_RESERVE
  AVIS_DEFAVORABLE
  ACCEPTE
  REFUSE
  BROUILLON
}

enum CategorieDossier {
  LONG_METRAGE
  COURT_METRAGE
  TELEFILM
  SERIE
  EMISSION_TV
  CLIP
  THEATRE
  DOUBLAGE
  MUSIQUE_STUDIO
  COMEDIE_MUSICALE
  CONCERT
  OPERA
  BALLET
  DANSE
  CIRQUE
  RADIO
  PHOTO
  FILM_INSTITUTIONNEL
  JEU_VIDEO
  VIDEO_EN_LIGNE
  AUTRE
  DOCUMENTAIRE_FICTIONNEL
}

enum STATUT_PIECE {
  VALIDE
  REFUSE
  EN_ATTENTE
}

enum JustificatifDossier {
  SYNOPSIS
  SCENARIO
  MESURES_SECURITE
  PLAN_TRAVAIL
  INFOS_COMPLEMENTAIRES
}

enum StatusNotif {
  NOUVEAU
  MIS_A_JOUR
}

enum Source {
  FORM_DS
  FORM_EDS
}

enum Sourcecomment {
  INSTRUCTEUR
  SOCIETE_PROD
}

enum TypeEmploi {
  ROLE_1
  ROLE_2
  FIGURATION
  SILHOUETTE
  SILHOUETTE_PARLANTE
  DOUBLURE
  DOUBLAGE
  CHANT
  DANSE
  JEU_VIDEO
  AUTRE
  CHORISTE
  CIRCASSIEN
  MUSICIEN
}

enum JustificatifEnfant {
  LIVRET_FAMILLE
  AUTORISATION_PARENTALE
  SITUATION_PARTICULIERE
  CONTRAT
  CERTIFICAT_SCOLARITE
  AVIS_MEDICAL
  DECLARATION_HONNEUR
  BON_PRISE_EN_CHARGE
  AUTORISATION_PRISE_EN_CHARGE
}

enum TypeConsultation {
  THALIE
  GENERALISTE
  UNNEEDED
}

enum TypeConsultationMedecin {
  PHYSIQUE
  PIECE
  PRISE_EN_CHARGE
  MEDECIN_TRAITANT
}

enum NatureCachet {
  CACHET_TOURNAGE
  CACHET_DOUBLAGE
  CACHET_REPRESENTATION
  CACHET_REPETITION
  CACHET_HORAIRE
  CACHET_SECURITE
  CACHET_POST_SYNCHRO
  CACHET_CAPTATION
  CACHET_SPECTACLE_VIVANT
  CACHET_RETAKE
  AUTRE_GARANTIE
  AUTRE_ADDITIONNELLE
}

enum Role {
  ADMIN
  INSTRUCTEUR
  MEMBRE
  MEDECIN
}

enum SectionPdf {
  TEXTES_LEGAUX
  CONSIDERANTS
  ARTICLE_2
  ARTICLE_3
  ARTICLE_4
  SIGNATURE
  RECOURS
}
