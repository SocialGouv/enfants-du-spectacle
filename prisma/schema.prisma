generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commission {
  id              Int        @id @default(autoincrement())
  departement     String
  date            DateTime
  dateLimiteDepot DateTime
  dossiers        Dossier[]
  lastSent        DateTime?
  SendList        SendList[]
  archived        Boolean?
}

model SocieteProduction {
  id                        Int         @id @default(autoincrement())
  nom                       String?     // Made optional to match formulaire schema
  siret                     String?     @unique // Made optional to match formulaire schema
  siren                     String?     // Made optional to match formulaire schema
  departement               String?     // Made optional to match formulaire schema
  naf                       String?     // Made optional to match formulaire schema
  raisonSociale             String?     // Made optional to match formulaire schema
  adresse                   String?     // Made optional to match formulaire schema
  adresseCodePostal         String?     // Made optional to match formulaire schema
  adresseCodeCommune        String?     // Made optional to match formulaire schema
  formeJuridique            String?     // Made optional to match formulaire schema
  conventionCollectiveCode  String?     // Made optional to match formulaire schema
  otherConventionCollective String?
  demandeurs                Demandeur[]
  dossiers                  Dossier[]
}

model Demandeur {
  id                        Int                @id @default(autoincrement())
  email                     String?            @unique // Made optional to match formulaire schema
  nom                       String?            // Made optional to match formulaire schema
  prenom                    String?            // Made optional to match formulaire schema
  phone                     String?
  fonction                  String?            // Made optional to match formulaire schema
  conventionCollectiveCode  String?
  otherConventionCollective String?
  societeProduction         SocieteProduction? @relation(fields: [societeProductionId], references: [id])
  societeProductionId       Int?               // Made optional to match formulaire schema
  dossiers                  Dossier[]
}

enum StatutDossier {
  BROUILLON
  CONSTRUCTION
  INSTRUCTION
  PRET
  AVIS_AJOURNE
  AVIS_FAVORABLE
  AVIS_FAVORABLE_SOUS_RESERVE
  AVIS_DEFAVORABLE
  ACCEPTE
  REFUSE
}

enum CategorieDossier {
  LONG_METRAGE
  COURT_METRAGE
  TELEFILM
  SERIE
  EMISSION_TV
  DOCUMENTAIRE_FICTIONNEL
  CLIP
  THEATRE
  DOUBLAGE
  MUSIQUE_STUDIO
  COMEDIE_MUSICALE
  CONCERT
  OPERA
  BALLET
  DANSE
  CIRQUE
  RADIO
  PHOTO
  FILM_INSTITUTIONNEL
  JEU_VIDEO
  VIDEO_EN_LIGNE
  AUTRE
}

enum STATUT_PIECE {
  VALIDE
  REFUSE
  EN_ATTENTE
}

model PieceDossier {
  id         Int                 @id @default(autoincrement())
  nom        String?             // Optional to match both schemas
  dossierId  Int
  dossier    Dossier?            @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  externalId String?
  type       JustificatifDossier
  link       String?             // Made optional to match formulaire schema
  statut     STATUT_PIECE?
}

enum JustificatifDossier {
  SYNOPSIS
  SCENARIO
  MESURES_SECURITE
  PLAN_TRAVAIL
  INFOS_COMPLEMENTAIRES
}

enum StatusNotif {
  NOUVEAU
  MIS_A_JOUR
}

enum Source {
  FORM_DS
  FORM_EDS
}

enum Sourcecomment {
  INSTRUCTEUR
  SOCIETE_PROD
}

model Dossier {
  id                        Int                   @id @default(autoincrement())
  nom                       String?               // Made optional to match formulaire schema
  statut                    StatutDossier         @default(BROUILLON) // Changed default to match formulaire
  categorie                 CategorieDossier?     // Made optional to match formulaire schema
  
  // Commission relationship (main app)
  commissionId              Int?                  // Made optional for formulaire compatibility
  commission                Commission?           @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  commissionString          String?               // From formulaire app
  commissionDate            DateTime?             // From formulaire app
  
  // SocieteProduction relationship
  societeProductionId       Int?                  // Made optional to match formulaire schema
  societeProduction         SocieteProduction?    @relation(fields: [societeProductionId], references: [id])
  
  // Child relationships
  enfants                   Enfant[]
  piecesDossier             PieceDossier[]
  commentaires              Commentaire[]
  comments                  Comments[]
  
  // Identifiers
  numeroDS                  Int?                  @default(0)
  externalId                String?               @unique
  number                    Int?
  
  // User relationships
  instructeurId             Int?                  // From main app
  instructeur               User?                 @relation(fields: [instructeurId], references: [id], name: "instructeur")
  creatorId                 Int?                  // Made optional to match both schemas
  creator                   User?                 @relation(fields: [creatorId], references: [id], name: "creator")
  
  // Medical relationships
  medecinId                 Int?
  medecin                   User?                 @relation(fields: [medecinId], references: [id], name: "medecin")
  
  // Collaborator relationships
  collaboratorIds           Int[]                 // From formulaire app
  
  // Demandeur relationship
  demandeurId               Int?                  // Made optional to match formulaire schema
  demandeur                 Demandeur?            @relation(fields: [demandeurId], references: [id])
  
  // Content fields
  justificatifs             JustificatifDossier[]
  scenesSensibles           String[]
  presentation              String?               // Made optional to match formulaire schema
  scenario                  String?
  securite                  String?
  complementaire            String?
  conventionCollectiveCode  String?
  otherConventionCollective String?
  
  // Date fields
  dateDebut                 DateTime?             // Made optional to match formulaire schema
  dateFin                   DateTime?             // Made optional to match formulaire schema
  dateCreation              DateTime?
  dateDerniereModification  DateTime?
  dateDepot                 DateTime?
  
  // Additional fields
  cdc                       Int?
  statusNotification        StatusNotif?
  source                    Source?
}

// Combined model for both app's comment systems
model Commentaire {
  id        Int      @id @default(autoincrement())
  text      String
  date      DateTime
  userId    Int
  user      User?    @relation(fields: [userId], references: [id])
  dossierId Int
  dossier   Dossier? @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  seen      Boolean?
}

// Comments model from formulaire app
model Comments {
  id             Int           @id @default(autoincrement())
  text           String
  source         Sourcecomment
  dossier        Dossier       @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  dossierId      Int
  enfant         Enfant?       @relation(fields: [enfantId], references: [id])
  enfantId       Int?
  parentComment  Comments?     @relation("ParentComments", fields: [commentsId], references: [id])
  commentsId     Int?
  Comments       Comments[]    @relation("ParentComments")
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  externalUserId Int?
  sender         String?
  seen           Boolean?
  date           DateTime?
}

enum TypeEmploi {
  ROLE_1
  ROLE_2
  FIGURATION
  SILHOUETTE
  SILHOUETTE_PARLANTE
  DOUBLURE
  DOUBLAGE
  CHANT
  CHORISTE
  CIRCASSIEN
  MUSICIEN
  DANSE
  JEU_VIDEO
  AUTRE
}

enum JustificatifEnfant {
  LIVRET_FAMILLE
  AUTORISATION_PARENTALE
  SITUATION_PARTICULIERE
  CONTRAT
  CERTIFICAT_SCOLARITE
  AVIS_MEDICAL
  DECLARATION_HONNEUR
  BON_PRISE_EN_CHARGE
  AUTORISATION_PRISE_EN_CHARGE
}

model PieceDossierEnfant {
  id         Int                @id @default(autoincrement())
  nom        String?            // Optional for compatibility with both apps
  enfantId   Int
  enfant     Enfant?            @relation(fields: [enfantId], references: [id], onDelete: Cascade)
  dossierId  Int?
  externalId String?
  type       JustificatifEnfant
  link       String?            // Made optional to match formulaire schema
  statut     STATUT_PIECE?
}

enum TypeConsultation {
  THALIE
  GENERALISTE
  UNNEEDED
}

enum TypeConsultationMedecin {
  PHYSIQUE
  PIECE
  PRISE_EN_CHARGE
  MEDECIN_TRAITANT
}

enum NatureCachet {
  CACHET_TOURNAGE
  CACHET_DOUBLAGE
  CACHET_REPRESENTATION
  CACHET_REPETITION
  CACHET_HORAIRE
  CACHET_SECURITE
  CACHET_POST_SYNCHRO
  CACHET_CAPTATION
  CACHET_SPECTACLE_VIVANT
  CACHET_RETAKE
  AUTRE_GARANTIE
  AUTRE_ADDITIONNELLE
}

model Remuneration {
  id                Int           @id @default(autoincrement())
  typeRemuneration  String?
  natureCachet      NatureCachet?
  autreNatureCachet String?
  montant           Float?
  nombre            Int?          @default(0)
  nombreLignes      Int?          @default(0)
  totalDadr         Float?
  comment           String?
  Enfant            Enfant?       @relation(fields: [enfantId], references: [id])
  enfantId          Int?
}

model Enfant {
  id                          Int                      @id @default(autoincrement())
  prenom                      String?                  // Made optional to match formulaire schema
  nom                         String?                  // Made optional to match formulaire schema
  dateNaissance               DateTime?                // Made optional to match formulaire schema
  typeEmploi                  TypeEmploi?              // Made optional to match formulaire schema
  nomPersonnage               String?
  periodeTravail              String?
  nombreJours                 Int?                     // Made optional to match formulaire schema
  contexteTravail             String?
  montantCachet               Float?                   // Made optional to match formulaire schema
  nombreCachets               Int?                     @default(0) // Made optional to match formulaire schema
  nombreLignes                Int?                     @default(0) // Made optional to match formulaire schema
  remunerationsAdditionnelles String?
  remunerationTotale          Float?                   // Made optional to match formulaire schema
  remuneration                Remuneration[]
  justificatifs               JustificatifEnfant[]
  piecesDossier               PieceDossierEnfant[]
  dossierId                   Int
  dossier                     Dossier                  @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  cdc                         Int?
  adresseEnfant               String?
  nomRepresentant1            String?
  prenomRepresentant1         String?
  adresseRepresentant1        String?
  telRepresentant1            String?
  mailRepresentant1           String?
  adresseRepresentant2        String?
  nomRepresentant2            String?
  prenomRepresentant2         String?
  telRepresentant2            String?
  mailRepresentant2           String?
  externalId                  String?                  @unique
  typeConsultation            TypeConsultation?
  typeConsultationMedecin     TypeConsultationMedecin?
  dateConsultation            DateTime?
  dateDerniereModification    DateTime?
  populatedByUserId           Int?
  populatedBy                 User?                    @relation(fields: [populatedByUserId], references: [id], name: "populatedBy")
  comments                    Comments[]
  checkTravailNuit            Boolean?
  textTravailNuit             String?
  // Fields from formulaire app for document links
  livret                      String?
  autorisation                String?
  situation                   String?
  contrat                     String?
  certificat                  String?
  avis                        String?
}

enum Role {
  ADMIN
  INSTRUCTEUR
  MEMBRE
  MEDECIN
}

model SendList {
  id           Int        @id @default(autoincrement())
  send         Boolean
  lastSent     DateTime?
  commissionId Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String?
  nom                   String?
  prenom                String?
  email                 String?       @unique
  telephone             String?
  fonction              String?
  emailVerified         DateTime?
  createdAt             DateTime?     @default(now()) @map(name: "created_at")
  updatedAt             DateTime?     @updatedAt @map(name: "updated_at")
  image                 String?
  accounts              Account[]
  sessions              Session[]
  dossiersAsInstructeur Dossier[]     @relation(name: "instructeur")
  dossiersCreated       Dossier[]     @relation(name: "creator")
  dossiersMedecin       Dossier[]     @relation(name: "medecin")
  enfantsPopulated      Enfant[]      @relation(name: "populatedBy")
  commentaires          Commentaire[]
  comments              Comments[]
  role                  Role?
  departement           String?
  departements          String[]
  SendList              SendList[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
