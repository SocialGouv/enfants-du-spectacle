generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Commission {
  id              Int        @id @default(autoincrement())
  departement     String
  date            DateTime
  dateLimiteDepot DateTime
  dossiers        Dossier[]
  lastSent        DateTime?
  SendList        SendList[]
  archived        Boolean?
}

model SocieteProduction {
  id                        Int         @id @default(autoincrement())
  nom                       String
  siret                     String
  siren                     String
  departement               String
  naf                       String
  raisonSociale             String
  adresse                   String
  adresseCodePostal         String
  adresseCodeCommune        String
  formeJuridique            String
  conventionCollectiveCode  String
  otherConventionCollective String?
  demandeurs                Demandeur[]
  dossiers                  Dossier[]
}

model Demandeur {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  nom                 String
  prenom              String
  phone               String?
  fonction            String
  societeProduction   SocieteProduction @relation(fields: [societeProductionId], references: [id])
  societeProductionId Int
  dossiers            Dossier[]
}

enum StatutDossier {
  CONSTRUCTION
  INSTRUCTION
  PRET
  AVIS_AJOURNE
  AVIS_FAVORABLE
  AVIS_FAVORABLE_SOUS_RESERVE
  AVIS_DEFAVORABLE
  ACCEPTE
  REFUSE
}

enum CategorieDossier {
  LONG_METRAGE
  COURT_METRAGE
  TELEFILM
  SERIE
  EMISSION_TV
  DOCUMENTAIRE_FICTIONNEL
  CLIP
  THEATRE
  DOUBLAGE
  MUSIQUE_STUDIO
  COMEDIE_MUSICALE
  CONCERT
  OPERA
  BALLET
  DANSE
  CIRQUE
  RADIO
  PHOTO
  FILM_INSTITUTIONNEL
  JEU_VIDEO
  VIDEO_EN_LIGNE
  AUTRE
}

enum STATUT_PIECE {
  VALIDE
  REFUSE
  EN_ATTENTE
}

model PieceDossier {
  id         Int                 @id @default(autoincrement())
  dossierId  Int
  dossier    Dossier?            @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  externalId String?
  type       JustificatifDossier
  link       String
  statut     STATUT_PIECE?
}

enum JustificatifDossier {
  SYNOPSIS
  SCENARIO
  MESURES_SECURITE
  PLAN_TRAVAIL
  INFOS_COMPLEMENTAIRES
}

enum StatusNotif {
  NOUVEAU
  MIS_A_JOUR
}

enum Source {
  FORM_DS
  FORM_EDS
}

model Dossier {
  id                        Int                   @id @default(autoincrement())
  nom                       String
  statut                    StatutDossier         @default(CONSTRUCTION)
  categorie                 CategorieDossier
  commissionId              Int
  commission                Commission            @relation(fields: [commissionId], references: [id], onDelete: Cascade)
  societeProductionId       Int
  societeProduction         SocieteProduction     @relation(fields: [societeProductionId], references: [id])
  enfants                   Enfant[]
  piecesDossier             PieceDossier[]
  commentaires              Commentaire[]
  numeroDS                  Int?                  @default(0)
  userId                    Int?
  user                      User?                 @relation(fields: [userId], references: [id], name: "instructeur")
  medecinId                 Int?
  medecin                   User?                 @relation(fields: [medecinId], references: [id], name: "medecin")
  demandeurId               Int
  demandeur                 Demandeur             @relation(fields: [demandeurId], references: [id])
  justificatifs             JustificatifDossier[]
  scenesSensibles           String[]
  presentation              String
  conventionCollectiveCode  String?
  otherConventionCollective String?
  dateDebut                 DateTime
  dateFin                   DateTime
  externalId                String?               @unique
  number                    Int?
  dateDerniereModification  DateTime?
  cdc                       Int?
  dateDepot                 DateTime?
  statusNotification        StatusNotif?
  source                    Source?
}

model Commentaire {
  id        Int      @id @default(autoincrement())
  text      String
  date      DateTime
  userId    Int
  user      User?    @relation(fields: [userId], references: [id])
  dossierId Int
  dossier   Dossier? @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  seen      Boolean?
}

enum TypeEmploi {
  ROLE_1
  ROLE_2
  FIGURATION
  SILHOUETTE
  SILHOUETTE_PARLANTE
  DOUBLURE
  DOUBLAGE
  CHANT
  CHORISTE
  CIRCASSIEN
  MUSICIEN
  DANSE
  JEU_VIDEO
  AUTRE
}

enum JustificatifEnfant {
  LIVRET_FAMILLE
  AUTORISATION_PARENTALE
  SITUATION_PARTICULIERE
  CONTRAT
  CERTIFICAT_SCOLARITE
  AVIS_MEDICAL
  DECLARATION_HONNEUR
  BON_PRISE_EN_CHARGE
  AUTORISATION_PRISE_EN_CHARGE
}

model PieceDossierEnfant {
  id         Int                @id @default(autoincrement())
  enfantId   Int
  enfant     Enfant?            @relation(fields: [enfantId], references: [id], onDelete: Cascade)
  dossierId  Int?
  externalId String?
  type       JustificatifEnfant
  link       String
  statut     STATUT_PIECE?
}

enum TypeConsultation {
  THALIE
  GENERALISTE
  UNNEEDED
}

enum TypeConsultationMedecin {
  PHYSIQUE
  PIECE
  PRISE_EN_CHARGE
  MEDECIN_TRAITANT
}

model Enfant {
  id                          Int                      @id @default(autoincrement())
  prenom                      String
  nom                         String
  dateNaissance               DateTime
  typeEmploi                  TypeEmploi
  nomPersonnage               String?
  periodeTravail              String?
  nombreJours                 Int
  contexteTravail             String?
  montantCachet               Float
  nombreCachets               Int                      @default(0)
  nombreLignes                Int                      @default(0)
  remunerationsAdditionnelles String?
  remunerationTotale          Float
  justificatifs               JustificatifEnfant[]
  piecesDossier               PieceDossierEnfant[]
  dossierId                   Int
  dossier                     Dossier                  @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  cdc                         Int?
  adresseEnfant               String?
  nomRepresentant1            String?
  prenomRepresentant1         String?
  adresseRepresentant1        String?
  telRepresentant1            String?
  mailRepresentant1           String?
  adresseRepresentant2        String?
  nomRepresentant2            String?
  prenomRepresentant2         String?
  telRepresentant2            String?
  mailRepresentant2           String?
  externalId                  String?                  @unique
  typeConsultation            TypeConsultation?
  typeConsultationMedecin     TypeConsultationMedecin?
  dateConsultation            DateTime?
  checkTravailNuit            Boolean?
  textTravailNuit             String?
}

// for next-auth

enum Role {
  ADMIN
  INSTRUCTEUR
  MEMBRE
  MEDECIN
}

model SendList {
  id           Int        @id @default(autoincrement())
  send         Boolean
  lastSent     DateTime?
  commissionId Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              Int           @id @default(autoincrement())
  name            String?
  nom             String?
  prenom          String?
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  dossiers        Dossier[]     @relation(name: "instructeur")
  dossiersMedecin Dossier[]     @relation(name: "medecin")
  commentaires    Commentaire[]
  role            Role?
  departement     String?
  departements    String[]
  SendList        SendList[]
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
