// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  nom           String?
  prenom        String?
  email         String?   @unique
  telephone     String?
  fonction      String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  Account       Account[]
  Session       Session[]
  dossiers      Dossier[]
  role          Role?
  departement   String?
  departements  String[]
  Enfant        Enfant[]
}

model Demandeur {
  id                       Int                @id @default(autoincrement())
  email                    String?
  nom                      String?
  prenom                   String?
  phone                    String?
  fonction                 String?
  conventionCollectiveCode String?
  societeProduction        SocieteProduction? @relation(fields: [societeProductionId], references: [id])
  societeProductionId      Int?
  dossiers                 Dossier[]
}

model SocieteProduction {
  id                 Int         @id @default(autoincrement())
  nom                String?
  siret              String?     @unique
  siren              String?
  departement        String?
  naf                String?
  raisonSociale      String?
  adresse            String?
  adresseCodePostal  String?
  adresseCodeCommune String?
  formeJuridique     String?
  Demandeur          Demandeur[]
}

enum StatutDossier {
  BROUILLON
  CONSTRUCTION
  INSTRUCTION
  PRET
  AVIS_AJOURNE
  AVIS_FAVORABLE
  AVIS_FAVORABLE_SOUS_RESERVE
  AVIS_DEFAVORABLE
  ACCEPTE
  REFUSE
}

enum CategorieDossier {
  LONG_METRAGE
  COURT_METRAGE
  TELEFILM
  SERIE
  EMISSION_TV
  CLIP
  THEATRE
  DOUBLAGE
  MUSIQUE_STUDIO
  COMEDIE_MUSICALE
  CONCERT
  OPERA
  BALLET
  DANSE
  CIRQUE
  RADIO
  PHOTO
  FILM_INSTITUTIONNEL
  JEU_VIDEO
  VIDEO_EN_LIGNE
  AUTRE
}

model PieceDossier {
  id         Int                 @id @default(autoincrement())
  nom        String
  dossierId  Int
  dossier    Dossier?            @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  externalId String?
  type       JustificatifDossier
  link       String?
}

enum JustificatifDossier {
  SYNOPSIS
  SCENARIO
  MESURES_SECURITE
  PLAN_TRAVAIL
  INFOS_COMPLEMENTAIRES
}

model Dossier {
  id                       Int                   @id @default(autoincrement())
  nom                      String?
  statut                   StatutDossier         @default(BROUILLON)
  categorie                CategorieDossier?
  enfants                  Enfant[]
  piecesDossier            PieceDossier[]
  userId                   Int
  user                     User                  @relation(fields: [userId], references: [id])
  justificatifs            JustificatifDossier[]
  scenesSensibles          String[]
  presentation             String?
  dateDebut                DateTime?
  dateFin                  DateTime?
  number                   Int?
  dateDerniereModification DateTime?
  cdc                      Int?
  scenario                 String?
  securite                 String?
  complementaire           String?
  dateDepot                DateTime?
  Demandeur                Demandeur?            @relation(fields: [demandeurId], references: [id])
  demandeurId              Int?
}

enum TypeEmploi {
  ROLE_1
  ROLE_2
  FIGURATION
  SILHOUETTE
  SILHOUETTE_PARLANTE
  DOUBLURE
  DOUBLAGE
  CHANT
  DANSE
  JEU_VIDEO
  AUTRE
}

enum JustificatifEnfant {
  LIVRET_FAMILLE
  AUTORISATION_PARENTALE
  SITUATION_PARTICULIERE
  CONTRAT
  CERTIFICAT_SCOLARITE
  AVIS_MEDICAL
}

model PieceDossierEnfant {
  id         Int                @id @default(autoincrement())
  nom        String
  enfantId   Int
  enfant     Enfant?            @relation(fields: [enfantId], references: [id], onDelete: Cascade)
  externalId String?
  type       JustificatifEnfant
  link       String?
}

model Enfant {
  id                          Int                  @id @default(autoincrement())
  prenom                      String?
  nom                         String?
  dateNaissance               DateTime?
  typeEmploi                  TypeEmploi?
  nomPersonnage               String?
  periodeTravail              String?
  nombreJours                 Int?
  contexteTravail             String?
  montantCachet               Float?
  nombreCachets               Int?                 @default(0)
  nombreLignes                Int?                 @default(0)
  remunerationsAdditionnelles String?
  remunerationTotale          Float?
  justificatifs               JustificatifEnfant[]
  piecesDossier               PieceDossierEnfant[]
  dossierId                   Int
  dossier                     Dossier?             @relation(fields: [dossierId], references: [id], onDelete: Cascade)
  cdc                         Int?
  adresseEnfant               String?
  nomRepresentant1            String?
  prenomRepresentant1         String?
  adresseRepresentant1        String?
  adresseRepresentant2        String?
  nomRepresentant2            String?
  prenomRepresentant2         String?
  livret                      String?
  autorisation                String?
  situation                   String?
  contrat                     String?
  certificat                  String?
  avis                        String?
  dateDerniereModification    DateTime?
  populatedBy                 User?                @relation(fields: [userId], references: [id])
  userId                      Int?
}

// for next-auth

enum Role {
  ADMIN
  INSTRUCTEUR
  MEMBRE
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
